# to add NOTICE
'mvn notice:check' Checks that a NOTICE file exists and that its content match what would be generated.
'mvn notice:generate' Generates a new NOTICE file, replacing any existing NOTICE file.


# to add licence headers
'mvn license:check' verify if some files miss license header
'mvn license:format' add the license header when missing. If a header is existing, it is updated to the new one.
'mvn license:remove' remove existing license header

# In dev process when changing the entities
'mvn clean generate-sources' will generates new or modified Q__ classes or to update evaluator's entites when updating evaluator lib

# To apply and generate diff sql database schema, in dev mod, see in liquibase.properties.generation for database properties
- delete the database
- 'mvn spring-boot:run' should create the database at start (don't use fast profile or add hsql in profile list)
- 'mvn compile liquibase:diff' to generate  each diff

# Liquibase memento :
- see in liquibase.properties.generation to set database name and defaultSchemaName (important for mysql, schemaName must be equals to database name)
- on non local database you can have X11 error if your are running the script from a server, see in liquibase.properties.generation property promptOnNonLocalDatabase to set to false
- 'mvn compile liquibase:update' will apply changelog not loaded (from liquibase files) to the database
- 'mvn compile liquibase:generateChangeLog' will generate the creation of database changelog file
- 'mvn compile liquibase:diff' to generate each diff
- check for mysql that table names are in lower case, do sames things for all table links...

# to run tests :
- `mvn test -Dspring.profiles.active=dev,fast,ldapgrp` don't forget to change databasename between prod
- `mvn test -Dtest=org.esupportail.publisher.repository.PermissionOnContextRepositoryTest#testInsert -Dspring.profiles.active=dev,fast,ldapgrp` don't forget to change databasename between prod for a specific class

# to run in dev :
- `mvn clean spring-boot:run -Dmaven.test.skip=true -Pdev` (+ `grunt serve` pour firefox)


# TODO

# TODO dependencies update
//@JsonFormat(shape = JsonFormat.Shape.STRING) should works with jackson 2.5, until use @JsonSerialize with custom serializer

# TODO with cache
error appear :
[WARN] net.sf.ehcache.pool.sizeof.ObjectGraphWalker - The configured limit of 1Â 000 object references was reached while attempting to calculate the size of the object graph.
Severe performance degradation could occur if the sizing operation continues. This can be avoided by setting the CacheManger or Cache <sizeOfPolicy> elements maxDepthExceededBehavior
to "abort" or adding stop points with @IgnoreSizeOf annotations. If performance degradation is NOT an issue at the configured limit, raise the limit value using the CacheManager or
Cache <sizeOfPolicy> elements maxDepth attribute. For more information, see the Ehcache configuration documentation.
=> read http://www.ehcache.org/documentation/2.8/configuration/cache-size.html#built-in-sizing-computation-and-enforcement


