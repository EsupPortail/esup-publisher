package org.esupportail.publisher.domain;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.ToString;
import org.esupportail.publisher.domain.util.CstPropertiesLength;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * @author GIP RECIA - Julien Gribonvald  07/04/17.
 */
@Data
@ToString(callSuper = false)
@NoArgsConstructor
@EqualsAndHashCode(callSuper = false)
@RequiredArgsConstructor
@Entity
@Table(name = "T_LINKEDFILEITEM", uniqueConstraints = @UniqueConstraint(columnNames = {
    "item_id", "uri" }))
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class LinkedFileItem extends AbstractAutoGeneratedIdEntity {

    @NotNull
    @NonNull
    @Size(min = 3, max = CstPropertiesLength.URL)
    @Column(name = "uri", nullable = false)
    private String uri;

    @NonNull
    @ManyToOne(cascade = {},targetEntity = AbstractItem.class, fetch = FetchType.LAZY)
    @JoinColumn(name = "item_id", nullable = false)
    private AbstractItem abstractItem;

    @Column(name = "item_id", insertable = false, updatable = false)
    private Long item_id;
}
